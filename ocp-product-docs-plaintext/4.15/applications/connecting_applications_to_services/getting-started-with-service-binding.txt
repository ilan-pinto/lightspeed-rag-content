# Getting started with service binding


The Service Binding Operator manages the data plane for workloads and backing services. This guide provides instructions with examples to help you create a database instance, deploy an application, and use the Service Binding Operator to create a binding connection between the application and the database service.
## Prerequisites
* You have access to an Red Hat OpenShift Container Platform cluster using an account with cluster-admin permissions.
* You have installed the oc CLI.
* You have installed Service Binding Operator from OperatorHub.
* You have installed the 5.1.2 version of the Crunchy Postgres for Kubernetes Operator from OperatorHub using the v5 Update channel. The installed Operator is available in an appropriate namespace, such as the my-petclinic namespace.

[NOTE]
----
You can create the namespace using the oc create namespace my-petclinic command.
----
* You have installed the 5.1.2 version of the Crunchy Postgres for Kubernetes Operator from OperatorHub using the v5 Update channel. The installed Operator is available in an appropriate project, such as the my-petclinic project.

[NOTE]
----
You can create the project using the oc new-project my-petclinic command.
----

# Creating a PostgreSQL database instance

To create a PostgreSQL database instance, you must create a PostgresCluster custom resource (CR) and configure the database.

1. Create the PostgresCluster CR in the my-petclinic namespace by running the following command in shell:

```terminal
$ oc apply -n my-petclinic -f - << EOD
---
apiVersion: postgres-operator.crunchydata.com/v1beta1
kind: PostgresCluster
metadata:
  name: hippo
spec:
  image: registry.developers.crunchydata.com/crunchydata/crunchy-postgres:ubi8-14.4-0
  postgresVersion: 14
  instances:
    - name: instance1
      dataVolumeClaimSpec:
        accessModes:
        - "ReadWriteOnce"
        resources:
          requests:
            storage: 1Gi
  backups:
    pgbackrest:
      image: registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest:ubi8-2.38-0
      repos:
      - name: repo1
        volume:
          volumeClaimSpec:
            accessModes:
            - "ReadWriteOnce"
            resources:
              requests:
                storage: 1Gi
EOD
```


The annotations added in this PostgresCluster CR enable the service binding connection and trigger the Operator reconciliation.

The output verifies that the database instance is created:
Example output

```terminal
postgrescluster.postgres-operator.crunchydata.com/hippo created
```

2. After you have created the database instance, ensure that all the pods in the my-petclinic namespace are running:

```terminal
$ oc get pods -n my-petclinic
```


The output, which takes a few minutes to display, verifies that the database is created and configured:
Example output

```terminal
NAME                                     READY    STATUS      RESTARTS   AGE
hippo-backup-9rxm-88rzq                   0/1     Completed   0          2m2s
hippo-instance1-6psd-0                    4/4     Running     0          3m28s
hippo-repo-host-0                         2/2     Running     0          3m28s
```


After the database is configured, you can deploy the sample application and connect it to the database service.

# Deploying the Spring PetClinic sample application

To deploy the Spring PetClinic sample application on an Red Hat OpenShift Container Platform cluster, you must use a deployment configuration and configure your local environment to be able to test the application.

1. Deploy the spring-petclinic application with the PostgresCluster custom resource (CR) by running the following command in shell:

```terminal
$ oc apply -n my-petclinic -f - << EOD
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: spring-petclinic
  labels:
    app: spring-petclinic
spec:
  replicas: 1
  selector:
    matchLabels:
      app: spring-petclinic
  template:
    metadata:
      labels:
        app: spring-petclinic
    spec:
      containers:
        - name: app
          image: quay.io/service-binding/spring-petclinic:latest
          imagePullPolicy: Always
          env:
          - name: SPRING_PROFILES_ACTIVE
            value: postgres
          ports:
          - name: http
            containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: spring-petclinic
  name: spring-petclinic
spec:
  type: NodePort
  ports:
    - port: 80
      protocol: TCP
      targetPort: 8080
  selector:
    app: spring-petclinic
EOD
```


The output verifies that the Spring PetClinic sample application is created and deployed:
Example output

```terminal
deployment.apps/spring-petclinic created
service/spring-petclinic created
```


[NOTE]
----
If you are deploying the application using Container images in the Developer perspective of the web console, you must enter the following environment variables under the Deployment section of the Advanced options:
* Name: SPRING_PROFILES_ACTIVE
* Value: postgres
----
2. Verify that the application is not yet connected to the database service by running the following command:

```terminal
$ oc get pods -n my-petclinic
```


The output takes a few minutes to display the CrashLoopBackOff status:
Example output

```terminal
NAME                                READY   STATUS             RESTARTS      AGE
spring-petclinic-5b4c7999d4-wzdtz   0/1     CrashLoopBackOff   4 (13s ago)   2m25s
```


At this stage, the pod fails to start. If you try to interact with the application, it returns errors.
3. Expose the service to create a route for your application:

```terminal
$ oc expose service spring-petclinic -n my-petclinic
```


The output verifies that the spring-petclinic service is exposed and a route for the Spring PetClinic sample application is created:
Example output

```terminal
route.route.openshift.io/spring-petclinic exposed
```


You can now use the Service Binding Operator to connect the application to the database service.

# Connecting the Spring PetClinic sample application to the PostgreSQL database service

To connect the sample application to the database service, you must create a ServiceBinding custom resource (CR) that triggers the Service Binding Operator to project the binding data into the application.

1. Create a ServiceBinding CR to project the binding data:

```terminal
$ oc apply -n my-petclinic -f - << EOD
---
apiVersion: binding.operators.coreos.com/v1alpha1
kind: ServiceBinding
metadata:
  name: spring-petclinic-pgcluster
spec:
  services: 1
    - group: postgres-operator.crunchydata.com
      version: v1beta1
      kind: PostgresCluster 2
      name: hippo
  application: 3
    name: spring-petclinic
    group: apps
    version: v1
    resource: deployments
EOD
```

Specifies a list of service resources.
The CR of the database.
The sample application that points to a Deployment or any other similar resource with an embedded PodSpec.

The output verifies that the ServiceBinding CR is created to project the binding data into the sample application.
Example output

```terminal
servicebinding.binding.operators.coreos.com/spring-petclinic created
```

2. Verify that the request for service binding is successful:

```terminal
$ oc get servicebindings -n my-petclinic
```

Example output

```terminal
NAME                         READY   REASON              AGE
spring-petclinic-pgcluster   True    ApplicationsBound   7s
```


By default, the values from the binding data of the database service are projected as files into the workload container that runs the sample application. For example, all the values from the Secret resource are projected into the bindings/spring-petclinic-pgcluster directory.

[NOTE]
----
Optionally, you can also verify that the files in the application contain the projected binding data, by printing out the directory contents:

```terminal
$ for i in username password host port type; do oc exec -it deploy/spring-petclinic -n my-petclinic -- /bin/bash -c 'cd /tmp; find /bindings/*/'$i' -exec echo -n {}:" " \; -exec cat {} \;'; echo; done
```


```text
/bindings/spring-petclinic-pgcluster/username: <username>
/bindings/spring-petclinic-pgcluster/password: <password>
/bindings/spring-petclinic-pgcluster/host: hippo-primary.my-petclinic.svc
/bindings/spring-petclinic-pgcluster/port: 5432
/bindings/spring-petclinic-pgcluster/type: postgresql
```

----
3. Set up the port forwarding from the application port to access the sample application from your local environment:

```terminal
$ oc port-forward --address 0.0.0.0 svc/spring-petclinic 8080:80 -n my-petclinic
```

Example output

```terminal
Forwarding from 0.0.0.0:8080 -> 8080
Handling connection for 8080
```

4. Access http://localhost:8080/petclinic.

You can now remotely access the Spring PetClinic sample application at localhost:8080 and see that the application is now connected to the database service.

# Additional Resources

* Installing Service Binding Operator.
* Creating applications using the Developer perspective.
* Managing resources from custom resource definitions.
* Known bindable Operators.
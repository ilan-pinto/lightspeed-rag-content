# Providing sensitive data to pods by using an external secrets store


Some applications need sensitive information, such as passwords and user names, that you do not want developers to have.
As an alternative to using Kubernetes Secret objects to provide sensitive information, you can use an external secrets store to store the sensitive information. You can use the Secrets Store CSI Driver Operator to integrate with an external secrets store and mount the secret content as a pod volume.

[IMPORTANT]
----
The Secrets Store CSI Driver Operator is a Technology Preview feature only. Technology Preview features are not supported with Red Hat production service level agreements (SLAs) and might not be functionally complete. Red Hat does not recommend using them in production. These features provide early access to upcoming product features, enabling customers to test functionality and provide feedback during the development process.
For more information about the support scope of Red Hat Technology Preview features, see Technology Preview Features Support Scope.
----

# About the Secrets Store CSI Driver Operator

Kubernetes secrets are stored with Base64 encoding. etcd provides encryption at rest for these secrets, but when secrets are retrieved, they are decrypted and presented to the user. If role-based access control is not configured properly on your cluster, anyone with API or etcd access can retrieve or modify a secret. Additionally, anyone who is authorized to create a pod in a namespace can use that access to read any secret in that namespace.

To store and manage your secrets securely, you can configure the Red Hat OpenShift Container Platform Secrets Store Container Storage Interface (CSI) Driver Operator to mount secrets from an external secret management system, such as Azure Key Vault, by using a provider plugin. Applications can then use the secret, but the secret does not persist on the system after the application pod is destroyed.

The Secrets Store CSI Driver Operator, secrets-store.csi.k8s.io, enables Red Hat OpenShift Container Platform to mount multiple secrets, keys, and certificates stored in enterprise-grade external secrets stores into pods as a volume. The Secrets Store CSI Driver Operator communicates with the provider using gRPC to fetch the mount contents from the specified external secrets store. After the volume is attached, the data in it is mounted into the container&#8217;s file system. Secrets store volumes are mounted in-line.

## Secrets store providers

The following secrets store providers are available for use with the Secrets Store CSI Driver Operator:

* AWS Secrets Manager
* AWS Systems Manager Parameter Store
* Azure Key Vault

## Automatic rotation

The Secrets Store CSI driver periodically rotates the content in the mounted volume with the content from the external secrets store. If a secret is updated in the external secrets store, the secret will be updated in the mounted volume. The Secrets Store CSI Driver Operator polls for updates every 2 minutes.

If you enabled synchronization of mounted content as Kubernetes secrets, the Kubernetes secrets are also rotated.

Applications consuming the secret data must watch for updates to the secrets.

# Installing the Secrets Store CSI driver

* Access to the Red Hat OpenShift Container Platform web console.
* Administrator access to the cluster.

To install the Secrets Store CSI driver:

1. Install the Secrets Store CSI Driver Operator:
1. Log in to the web console.
2. Click Operators â†’ OperatorHub.
3. Locate the Secrets Store CSI Driver Operator by typing "Secrets Store CSI" in the filter box.
4. Click the Secrets Store CSI Driver Operator button.
5. On the Secrets Store CSI Driver Operator page, click Install.
6. On the Install Operator page, ensure that:
* All namespaces on the cluster (default) is selected.
* Installed Namespace is set to openshift-cluster-csi-drivers.
7. Click Install.

After the installation finishes, the Secrets Store CSI Driver Operator is listed in the Installed Operators section of the web console.
2. Create the ClusterCSIDriver instance for the driver (secrets-store.csi.k8s.io):
1. Click Administration -> CustomResourceDefinitions -> ClusterCSIDriver.
2. On the Instances tab, click Create ClusterCSIDriver.

Use the following YAML file:

```yaml
apiVersion: operator.openshift.io/v1
kind: ClusterCSIDriver
metadata:
    name: secrets-store.csi.k8s.io
spec:
  managementState: Managed
```

3. Click Create.

# Mounting secrets from an external secrets store to a CSI volume

After installing the Secrets Store CSI Driver Operator, you can mount secrets from one of the following external secrets stores to a CSI volume:

* AWS Secrets Manager
* AWS Systems Manager Parameter Store
* Azure Key Vault

## Mounting secrets from AWS Secrets Manager

You can use the Secrets Store CSI Driver Operator to mount secrets from {secrets-store-provider} to a CSI volume in Red Hat OpenShift Container Platform. To mount secrets from {secrets-store-provider}, your cluster must be installed on AWS and use AWS Security Token Service (STS).


[IMPORTANT]
----
It is not supported to use the Secrets Store CSI Driver Operator with {secrets-store-provider} in a hosted control plane cluster.
----

* Your cluster is installed on AWS and uses AWS Security Token Service (STS).
* You have installed the Secrets Store CSI Driver Operator. See Installing the Secrets Store CSI driver for instructions.
* You have configured {secrets-store-provider} to store the required secrets.
* You have extracted and prepared the ccoctl binary.
* You have installed the jq CLI tool.
* You have access to the cluster as a user with the cluster-admin role.

1. Install the {secrets-store-provider} provider:
1. Create a YAML file with the following configuration for the provider resources:

[IMPORTANT]
----
The {secrets-store-provider} provider for the Secrets Store CSI driver is an upstream provider.
This configuration is modified from the configuration provided in the upstream AWS documentation so that it works properly with Red Hat OpenShift Container Platform. Changes to this configuration might impact functionality.
----
Example aws-provider.yaml file

```yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: csi-secrets-store-provider-aws
  namespace: openshift-cluster-csi-drivers
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: csi-secrets-store-provider-aws-cluster-role
rules:
- apiGroups: [""]
  resources: ["serviceaccounts/token"]
  verbs: ["create"]
- apiGroups: [""]
  resources: ["serviceaccounts"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: csi-secrets-store-provider-aws-cluster-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: csi-secrets-store-provider-aws-cluster-role
subjects:
- kind: ServiceAccount
  name: csi-secrets-store-provider-aws
  namespace: openshift-cluster-csi-drivers
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  namespace: openshift-cluster-csi-drivers
  name: csi-secrets-store-provider-aws
  labels:
    app: csi-secrets-store-provider-aws
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: csi-secrets-store-provider-aws
  template:
    metadata:
      labels:
        app: csi-secrets-store-provider-aws
    spec:
      serviceAccountName: csi-secrets-store-provider-aws
      hostNetwork: false
      containers:
        - name: provider-aws-installer
          image: public.ecr.aws/aws-secrets-manager/secrets-store-csi-driver-provider-aws:1.0.r2-50-g5b4aca1-2023.06.09.21.19
          imagePullPolicy: Always
          args:
              - --provider-volume=/etc/kubernetes/secrets-store-csi-providers
          resources:
            requests:
              cpu: 50m
              memory: 100Mi
            limits:
              cpu: 50m
              memory: 100Mi
          securityContext:
            privileged: true
          volumeMounts:
            - mountPath: "/etc/kubernetes/secrets-store-csi-providers"
              name: providervol
            - name: mountpoint-dir
              mountPath: /var/lib/kubelet/pods
              mountPropagation: HostToContainer
      tolerations:
      - operator: Exists
      volumes:
        - name: providervol
          hostPath:
            path: "/etc/kubernetes/secrets-store-csi-providers"
        - name: mountpoint-dir
          hostPath:
            path: /var/lib/kubelet/pods
            type: DirectoryOrCreate
      nodeSelector:
        kubernetes.io/os: linux
```

2. Grant privileged access to the csi-secrets-store-provider-aws service account by running the following command:

```terminal
$ oc adm policy add-scc-to-user privileged -z csi-secrets-store-provider-aws -n openshift-cluster-csi-drivers
```

3. Create the provider resources by running the following command:

```terminal
$ oc apply -f aws-provider.yaml
```

2. Grant permission to allow the service account to read the AWS secret object:
1. Create a directory to contain the credentials request by running the following command:

```terminal
$ mkdir credentialsrequest-dir-aws
```

2. Create a YAML file with the following configuration for the credentials request:
Example credentialsrequest.yaml file

```yaml
apiVersion: cloudcredential.openshift.io/v1
kind: CredentialsRequest
metadata:
  name: aws-provider-test
  namespace: openshift-cloud-credential-operator
spec:
  providerSpec:
    apiVersion: cloudcredential.openshift.io/v1
    kind: AWSProviderSpec
    statementEntries:
    - action:
      - "secretsmanager:GetSecretValue"
      - "secretsmanager:DescribeSecret"
      effect: Allow
      resource: "arn:*:secretsmanager:*:*:secret:testSecret-??????"
  secretRef:
    name: aws-creds
    namespace: my-namespace
  serviceAccountNames:
  - aws-provider
```

3. Retrieve the OIDC provider by running the following command:

```terminal
$ oc get --raw=/.well-known/openid-configuration | jq -r '.issuer'
```

Example output

```terminal
https://<oidc_provider_name>
```


Copy the OIDC provider name <oidc_provider_name> from the output to use in the next step.
4. Use the ccoctl tool to process the credentials request by running the following command:

```terminal
$ ccoctl aws create-iam-roles \
    --name my-role --region=<aws_region> \
    --credentials-requests-dir=credentialsrequest-dir-aws \
    --identity-provider-arn arn:aws:iam::<aws_account>:oidc-provider/<oidc_provider_name> --output-dir=credrequests-ccoctl-output
```

Example output

```terminal
2023/05/15 18:10:34 Role arn:aws:iam::<aws_account_id>:role/my-role-my-namespace-aws-creds created
2023/05/15 18:10:34 Saved credentials configuration to: credrequests-ccoctl-output/manifests/my-namespace-aws-creds-credentials.yaml
2023/05/15 18:10:35 Updated Role policy for Role my-role-my-namespace-aws-creds
```


Copy the <aws_role_arn> from the output to use in the next step. For example, arn:aws:iam::<aws_account_id>:role/my-role-my-namespace-aws-creds.
5. Bind the service account with the role ARN by running the following command:

```terminal
$ oc annotate -n my-namespace sa/aws-provider eks.amazonaws.com/role-arn="<aws_role_arn>"
```

3. Create a secret provider class to define your secrets store provider:
1. Create a YAML file that defines the SecretProviderClass object:
Example secret-provider-class-aws.yaml

```yaml
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: my-aws-provider                   1
  namespace: my-namespace                 2
spec:
  provider: aws                           3
  parameters:                             4
    objects: |
      - objectName: "testSecret"
        objectType: "secretsmanager"
```

Specify the name for the secret provider class.
Specify the namespace for the secret provider class.
Specify the provider as aws.
Specify the provider-specific configuration parameters.
2. Create the SecretProviderClass object by running the following command:

```terminal
$ oc create -f secret-provider-class-aws.yaml
```

4. Create a deployment to use this secret provider class:
1. Create a YAML file that defines the Deployment object:
Example deployment.yaml

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-aws-deployment                              1
  namespace: my-namespace                              2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-storage
  template:
    metadata:
      labels:
        app: my-storage
    spec:
      containers:
      - name: busybox
        image: k8s.gcr.io/e2e-test-images/busybox:1.29
        command:
          - "/bin/sleep"
          - "10000"
        volumeMounts:
        - name: secrets-store-inline
          mountPath: "/mnt/secrets-store"
          readOnly: true
      volumes:
        - name: secrets-store-inline
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: "my-aws-provider" 3
```

Specify the name for the deployment.
Specify the namespace for the deployment. This must be the same namespace as the secret provider class.
Specify the name of the secret provider class.
2. Create the Deployment object by running the following command:

```terminal
$ oc create -f deployment.yaml
```


* Verify that you can access the secrets from {secrets-store-provider} in the pod volume mount:
1. List the secrets in the pod mount:

```terminal
$ oc exec busybox-<hash> -n my-namespace -- ls /mnt/secrets-store/
```

Example output

```terminal
testSecret
```

2. View a secret in the pod mount:

```terminal
$ oc exec busybox-<hash> -n my-namespace -- cat /mnt/secrets-store/testSecret
```

Example output

```terminal
<secret_value>
```


* Configuring the Cloud Credential Operator utility

## Mounting secrets from AWS Systems Manager Parameter Store

You can use the Secrets Store CSI Driver Operator to mount secrets from {secrets-store-provider} to a CSI volume in Red Hat OpenShift Container Platform. To mount secrets from {secrets-store-provider}, your cluster must be installed on AWS and use AWS Security Token Service (STS).


[IMPORTANT]
----
It is not supported to use the Secrets Store CSI Driver Operator with {secrets-store-provider} in a hosted control plane cluster.
----

* Your cluster is installed on AWS and uses AWS Security Token Service (STS).
* You have installed the Secrets Store CSI Driver Operator. See Installing the Secrets Store CSI driver for instructions.
* You have configured {secrets-store-provider} to store the required secrets.
* You have extracted and prepared the ccoctl binary.
* You have installed the jq CLI tool.
* You have access to the cluster as a user with the cluster-admin role.

1. Install the {secrets-store-provider} provider:
1. Create a YAML file with the following configuration for the provider resources:

[IMPORTANT]
----
The {secrets-store-provider} provider for the Secrets Store CSI driver is an upstream provider.
This configuration is modified from the configuration provided in the upstream AWS documentation so that it works properly with Red Hat OpenShift Container Platform. Changes to this configuration might impact functionality.
----
Example aws-provider.yaml file

```yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: csi-secrets-store-provider-aws
  namespace: openshift-cluster-csi-drivers
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: csi-secrets-store-provider-aws-cluster-role
rules:
- apiGroups: [""]
  resources: ["serviceaccounts/token"]
  verbs: ["create"]
- apiGroups: [""]
  resources: ["serviceaccounts"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: csi-secrets-store-provider-aws-cluster-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: csi-secrets-store-provider-aws-cluster-role
subjects:
- kind: ServiceAccount
  name: csi-secrets-store-provider-aws
  namespace: openshift-cluster-csi-drivers
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  namespace: openshift-cluster-csi-drivers
  name: csi-secrets-store-provider-aws
  labels:
    app: csi-secrets-store-provider-aws
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: csi-secrets-store-provider-aws
  template:
    metadata:
      labels:
        app: csi-secrets-store-provider-aws
    spec:
      serviceAccountName: csi-secrets-store-provider-aws
      hostNetwork: false
      containers:
        - name: provider-aws-installer
          image: public.ecr.aws/aws-secrets-manager/secrets-store-csi-driver-provider-aws:1.0.r2-50-g5b4aca1-2023.06.09.21.19
          imagePullPolicy: Always
          args:
              - --provider-volume=/etc/kubernetes/secrets-store-csi-providers
          resources:
            requests:
              cpu: 50m
              memory: 100Mi
            limits:
              cpu: 50m
              memory: 100Mi
          securityContext:
            privileged: true
          volumeMounts:
            - mountPath: "/etc/kubernetes/secrets-store-csi-providers"
              name: providervol
            - name: mountpoint-dir
              mountPath: /var/lib/kubelet/pods
              mountPropagation: HostToContainer
      tolerations:
      - operator: Exists
      volumes:
        - name: providervol
          hostPath:
            path: "/etc/kubernetes/secrets-store-csi-providers"
        - name: mountpoint-dir
          hostPath:
            path: /var/lib/kubelet/pods
            type: DirectoryOrCreate
      nodeSelector:
        kubernetes.io/os: linux
```

2. Grant privileged access to the csi-secrets-store-provider-aws service account by running the following command:

```terminal
$ oc adm policy add-scc-to-user privileged -z csi-secrets-store-provider-aws -n openshift-cluster-csi-drivers
```

3. Create the provider resources by running the following command:

```terminal
$ oc apply -f aws-provider.yaml
```

2. Grant permission to allow the service account to read the AWS secret object:
1. Create a directory to contain the credentials request by running the following command:

```terminal
$ mkdir credentialsrequest-dir-aws
```

2. Create a YAML file with the following configuration for the credentials request:
Example credentialsrequest.yaml file

```yaml
apiVersion: cloudcredential.openshift.io/v1
kind: CredentialsRequest
metadata:
  name: aws-provider-test
  namespace: openshift-cloud-credential-operator
spec:
  providerSpec:
    apiVersion: cloudcredential.openshift.io/v1
    kind: AWSProviderSpec
    statementEntries:
    - action:
      - "ssm:GetParameter"
      - "ssm:GetParameters"
      effect: Allow
      resource: "arn:*:ssm:*:*:parameter/testParameter*"
  secretRef:
    name: aws-creds
    namespace: my-namespace
  serviceAccountNames:
  - aws-provider
```

3. Retrieve the OIDC provider by running the following command:

```terminal
$ oc get --raw=/.well-known/openid-configuration | jq -r '.issuer'
```

Example output

```terminal
https://<oidc_provider_name>
```


Copy the OIDC provider name <oidc_provider_name> from the output to use in the next step.
4. Use the ccoctl tool to process the credentials request by running the following command:

```terminal
$ ccoctl aws create-iam-roles \
    --name my-role --region=<aws_region> \
    --credentials-requests-dir=credentialsrequest-dir-aws \
    --identity-provider-arn arn:aws:iam::<aws_account>:oidc-provider/<oidc_provider_name> --output-dir=credrequests-ccoctl-output
```

Example output

```terminal
2023/05/15 18:10:34 Role arn:aws:iam::<aws_account_id>:role/my-role-my-namespace-aws-creds created
2023/05/15 18:10:34 Saved credentials configuration to: credrequests-ccoctl-output/manifests/my-namespace-aws-creds-credentials.yaml
2023/05/15 18:10:35 Updated Role policy for Role my-role-my-namespace-aws-creds
```


Copy the <aws_role_arn> from the output to use in the next step. For example, arn:aws:iam::<aws_account_id>:role/my-role-my-namespace-aws-creds.
5. Bind the service account with the role ARN by running the following command:

```terminal
$ oc annotate -n my-namespace sa/aws-provider eks.amazonaws.com/role-arn="<aws_role_arn>"
```

3. Create a secret provider class to define your secrets store provider:
1. Create a YAML file that defines the SecretProviderClass object:
Example secret-provider-class-aws.yaml

```yaml
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: my-aws-provider                   1
  namespace: my-namespace                 2
spec:
  provider: aws                           3
  parameters:                             4
    objects: |
      - objectName: "testParameter"
        objectType: "ssmparameter"
```

Specify the name for the secret provider class.
Specify the namespace for the secret provider class.
Specify the provider as aws.
Specify the provider-specific configuration parameters.
2. Create the SecretProviderClass object by running the following command:

```terminal
$ oc create -f secret-provider-class-aws.yaml
```

4. Create a deployment to use this secret provider class:
1. Create a YAML file that defines the Deployment object:
Example deployment.yaml

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-aws-deployment                              1
  namespace: my-namespace                              2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-storage
  template:
    metadata:
      labels:
        app: my-storage
    spec:
      containers:
      - name: busybox
        image: k8s.gcr.io/e2e-test-images/busybox:1.29
        command:
          - "/bin/sleep"
          - "10000"
        volumeMounts:
        - name: secrets-store-inline
          mountPath: "/mnt/secrets-store"
          readOnly: true
      volumes:
        - name: secrets-store-inline
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: "my-aws-provider" 3
```

Specify the name for the deployment.
Specify the namespace for the deployment. This must be the same namespace as the secret provider class.
Specify the name of the secret provider class.
2. Create the Deployment object by running the following command:

```terminal
$ oc create -f deployment.yaml
```


* Verify that you can access the secrets from {secrets-store-provider} in the pod volume mount:
1. List the secrets in the pod mount:

```terminal
$ oc exec busybox-<hash> -n my-namespace -- ls /mnt/secrets-store/
```

Example output

```terminal
testParameter
```

2. View a secret in the pod mount:

```terminal
$ oc exec busybox-<hash> -n my-namespace -- cat /mnt/secrets-store/testSecret
```

Example output

```terminal
<secret_value>
```


* Configuring the Cloud Credential Operator utility

## Mounting secrets from Azure Key Vault

You can use the Secrets Store CSI Driver Operator to mount secrets from Azure Key Vault to a CSI volume in Red Hat OpenShift Container Platform. To mount secrets from Azure Key Vault, your cluster must be installed on Microsoft Azure.

* Your cluster is installed on Azure.
* You have installed the Secrets Store CSI Driver Operator. See Installing the Secrets Store CSI driver for instructions.
* You have configured Azure Key Vault to store the required secrets.
* You have installed the Azure CLI (az).
* You have access to the cluster as a user with the cluster-admin role.

1. Install the Azure Key Vault provider:
1. Create a YAML file with the following configuration for the provider resources:

[IMPORTANT]
----
The Azure Key Vault provider for the Secrets Store CSI driver is an upstream provider.
This configuration is modified from the configuration provided in the upstream Azure documentation so that it works properly with Red Hat OpenShift Container Platform. Changes to this configuration might impact functionality.
----
Example azure-provider.yaml file

```yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: csi-secrets-store-provider-azure
  namespace: openshift-cluster-csi-drivers
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: csi-secrets-store-provider-azure-cluster-role
rules:
- apiGroups: [""]
  resources: ["serviceaccounts/token"]
  verbs: ["create"]
- apiGroups: [""]
  resources: ["serviceaccounts"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: csi-secrets-store-provider-azure-cluster-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: csi-secrets-store-provider-azure-cluster-role
subjects:
- kind: ServiceAccount
  name: csi-secrets-store-provider-azure
  namespace: openshift-cluster-csi-drivers
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  namespace: openshift-cluster-csi-drivers
  name: csi-secrets-store-provider-azure
  labels:
    app: csi-secrets-store-provider-azure
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: csi-secrets-store-provider-azure
  template:
    metadata:
      labels:
        app: csi-secrets-store-provider-azure
    spec:
      serviceAccountName: csi-secrets-store-provider-azure
      hostNetwork: true
      containers:
        - name: provider-azure-installer
          image: mcr.microsoft.com/oss/azure/secrets-store/provider-azure:v1.4.1
          imagePullPolicy: IfNotPresent
          args:
            - --endpoint=unix:///provider/azure.sock
            - --construct-pem-chain=true
            - --healthz-port=8989
            - --healthz-path=/healthz
            - --healthz-timeout=5s
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8989
            failureThreshold: 3
            initialDelaySeconds: 5
            timeoutSeconds: 10
            periodSeconds: 30
          resources:
            requests:
              cpu: 50m
              memory: 100Mi
            limits:
              cpu: 50m
              memory: 100Mi
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 0
            capabilities:
              drop:
              - ALL
          volumeMounts:
            - mountPath: "/provider"
              name: providervol
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: type
                operator: NotIn
                values:
                - virtual-kubelet
      volumes:
        - name: providervol
          hostPath:
            path: "/var/run/secrets-store-csi-providers"
      tolerations:
      - operator: Exists
      nodeSelector:
        kubernetes.io/os: linux
```

2. Grant privileged access to the csi-secrets-store-provider-azure service account by running the following command:

```terminal
$ oc adm policy add-scc-to-user privileged -z csi-secrets-store-provider-azure -n openshift-cluster-csi-drivers
```

3. Create the provider resources by running the following command:

```terminal
$ oc apply -f azure-provider.yaml
```

2. Create a service principal to access the key vault:
1. Set the service principal client secret as an environment variable by running the following command:

```terminal
$ SERVICE_PRINCIPAL_CLIENT_SECRET="$(az ad sp create-for-rbac --name https://$KEYVAULT_NAME --query 'password' -otsv)"
```

2. Set the service principal client ID as an environment variable by running the following command:

```terminal
$ SERVICE_PRINCIPAL_CLIENT_ID="$(az ad sp list --display-name https://$KEYVAULT_NAME --query '[0].appId' -otsv)"
```

3. Create a generic secret with the service principal client secret and ID by running the following command:

```terminal
$ oc create secret generic secrets-store-creds -n my-namespace --from-literal clientid=${SERVICE_PRINCIPAL_CLIENT_ID} --from-literal clientsecret=${SERVICE_PRINCIPAL_CLIENT_SECRET}
```

4. Apply the secrets-store.csi.k8s.io/used=true label to allow the provider to find this nodePublishSecretRef secret:

```terminal
$ oc -n my-namespace label secret secrets-store-creds secrets-store.csi.k8s.io/used=true
```

3. Create a secret provider class to define your secrets store provider:
1. Create a YAML file that defines the SecretProviderClass object:
Example secret-provider-class-azure.yaml

```yaml
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: my-azure-provider                 1
  namespace: my-namespace                 2
spec:
  provider: azure                         3
  parameters:                             4
    usePodIdentity: "false"
    useVMManagedIdentity: "false"
    userAssignedIdentityID: ""
    keyvaultName: "kvname"
    objects: |
      array:
        - |
          objectName: secret1
          objectType: secret
    tenantId: "tid"
```

Specify the name for the secret provider class.
Specify the namespace for the secret provider class.
Specify the provider as azure.
Specify the provider-specific configuration parameters.
2. Create the SecretProviderClass object by running the following command:

```terminal
$ oc create -f secret-provider-class-azure.yaml
```

4. Create a deployment to use this secret provider class:
1. Create a YAML file that defines the Deployment object:
Example deployment.yaml

```yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-azure-deployment                            1
  namespace: my-namespace                              2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-storage
  template:
    metadata:
      labels:
        app: my-storage
    spec:
      containers:
      - name: busybox
        image: k8s.gcr.io/e2e-test-images/busybox:1.29
        command:
          - "/bin/sleep"
          - "10000"
        volumeMounts:
        - name: secrets-store-inline
          mountPath: "/mnt/secrets-store"
          readOnly: true
      volumes:
        - name: secrets-store-inline
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: "my-azure-provider" 3
            nodePublishSecretRef:
              name: secrets-store-creds                4
```

Specify the name for the deployment.
Specify the namespace for the deployment. This must be the same namespace as the secret provider class.
Specify the name of the secret provider class.
Specify the name of the Kubernetes secret that contains the service principal credentials to access Azure Key Vault.
2. Create the Deployment object by running the following command:

```terminal
$ oc create -f deployment.yaml
```


* Verify that you can access the secrets from Azure Key Vault in the pod volume mount:
1. List the secrets in the pod mount:

```terminal
$ oc exec busybox-<hash> -n my-namespace -- ls /mnt/secrets-store/
```

Example output

```terminal
secret1
```

2. View a secret in the pod mount:

```terminal
$ oc exec busybox-<hash> -n my-namespace -- cat /mnt/secrets-store/secret1
```

Example output

```terminal
my-secret-value
```


# Enabling synchronization of mounted content as Kubernetes secrets

You can enable synchronization to create Kubernetes secrets from the content on a mounted volume. An example where you might want to enable synchronization is to use an environment variable in your deployment to reference the Kubernetes secret.


[WARNING]
----
Do not enable synchronization if you do not want to store your secrets on your Red Hat OpenShift Container Platform cluster and in etcd. Enable this functionality only if you require it, such as when you want to use environment variables to refer to the secret.
----

If you enable synchronization, the secrets from the mounted volume are synchronized as Kubernetes secrets after you start a pod that mounts the secrets.

The synchronized Kubernetes secret is deleted when all pods that mounted the content are deleted.

* You have installed the Secrets Store CSI Driver Operator.
* You have installed a secrets store provider.
* You have created the secret provider class.
* You have access to the cluster as a user with the cluster-admin role.

1. Edit the SecretProviderClass resource by running the following command:

```terminal
$ oc edit secretproviderclass my-azure-provider 1
```

Replace my-azure-provider with the name of your secret provider class.
2. Add the secretsObjects section with the configuration for the synchronized Kubernetes secrets:

```yaml
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: my-azure-provider
  namespace: my-namespace
spec:
  provider: azure
  secretObjects:                                   1
    - secretName: tlssecret                        2
      type: kubernetes.io/tls                      3
      labels:
        environment: "test"
      data:
        - objectName: tlskey                       4
          key: tls.key                             5
        - objectName: tlscrt
          key: tls.crt
  parameters:
    usePodIdentity: "false"
    keyvaultName: "kvname"
    objects:  |
      array:
        - |
          objectName: tlskey
          objectType: secret
        - |
          objectName: tlscrt
          objectType: secret
    tenantId: "tid"
```

Specify the configuration for synchronized Kubernetes secrets.
Specify the name of the Kubernetes Secret object to create.
Specify the type of Kubernetes Secret object to create. For example, Opaque or kubernetes.io/tls.
Specify the object name or alias of the mounted content to synchronize.
Specify the data field from the specified objectName to populate the Kubernetes secret with.
3. Save the file to apply the changes.

# Viewing the status of secrets in the pod volume mount

You can view detailed information, including the versions, of the secrets in the pod volume mount.

The Secrets Store CSI Driver Operator creates a SecretProviderClassPodStatus resource in the same namespace as the pod. You can review this resource to see detailed information, including versions, about the secrets in the pod volume mount.

* You have installed the Secrets Store CSI Driver Operator.
* You have installed a secrets store provider.
* You have created the secret provider class.
* You have deployed a pod that mounts a volume from the Secrets Store CSI Driver Operator.
* You have access to the cluster as a user with the cluster-admin role.

* View detailed information about the secrets in a pod volume mount by running the following command:

```terminal
$ oc get secretproviderclasspodstatus <secret_provider_class_pod_status_name> -o yaml 1
```

The name of the secret provider class pod status object is in the format of <pod_name>-<namespace>-<secret_provider_class_name>.
Example output

```terminal
...
status:
  mounted: true
  objects:
  - id: secret/tlscrt
    version: f352293b97da4fa18d96a9528534cb33
  - id: secret/tlskey
    version: 02534bc3d5df481cb138f8b2a13951ef
  podName: busybox-<hash>
  secretProviderClassName: my-azure-provider
  targetPath: /var/lib/kubelet/pods/f0d49c1e-c87a-4beb-888f-37798456a3e7/volumes/kubernetes.io~csi/secrets-store-inline/mount
```


# Uninstalling the Secrets Store CSI Driver Operator

* Access to the Red Hat OpenShift Container Platform web console.
* Administrator access to the cluster.

To uninstall the Secrets Store CSI Driver Operator:

1. Stop all application pods that use the secrets-store.csi.k8s.io provider.
2. Remove any third-party provider plug-in for your chosen secret store.
3. Remove the Container Storage Interface (CSI) driver and associated manifests:
1. Click Administration â†’ CustomResourceDefinitions â†’ ClusterCSIDriver.
2. On the Instances tab, for secrets-store.csi.k8s.io, on the far left side, click the drop-down menu, and then click Delete ClusterCSIDriver.
3. When prompted, click Delete.
4. Verify that the CSI driver pods are no longer running.
5. Uninstall the Secrets Store CSI Driver Operator:

[NOTE]
----
Before you can uninstall the Operator, you must remove the CSI driver first.
----
1. Click Operators â†’ Installed Operators.
2. On the Installed Operators page, scroll or type "Secrets Store CSI" into the Search by name box to find the Operator, and then click it.
3. On the upper, right of the Installed Operators > Operator details page, click Actions â†’ Uninstall Operator.
4. When prompted on the Uninstall Operator window, click the Uninstall button to remove the Operator from the namespace. Any applications deployed by the Operator on the cluster need to be cleaned up manually.

After uninstalling, the Secrets Store CSI Driver Operator is no longer listed in the Installed Operators section of the web console.
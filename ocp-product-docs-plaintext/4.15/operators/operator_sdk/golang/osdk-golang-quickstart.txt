# Getting started with Operator SDK for Go-based Operators


To demonstrate the basics of setting up and running a Go-based Operator using tools and libraries provided by the Operator SDK, Operator developers can build an example Go-based Operator for Memcached, a distributed key-value store, and deploy it to a cluster.

# Prerequisites

* Operator SDK CLI installed
* OpenShift CLI (oc) 4.15+ installed
* Go 1.19+
* Logged into an Red Hat OpenShift Container Platform 4.15 cluster with oc with an account that has cluster-admin permissions
* To allow the cluster to pull the image, the repository where you push your image must be set as public, or you must configure an image pull secret

* Installing the Operator SDK CLI
* Getting started with the OpenShift CLI

# Creating and deploying Go-based Operators

You can build and deploy a simple {type}-based Operator for {app-proper} by using the Operator SDK.

1. Create a project.
1. Create your project directory:

```terminal
$ mkdir {app}-operator
```

2. Change into the project directory:

```terminal
$ cd {app}-operator
```

3. Run the operator-sdk init command
to initialize the project:

```terminal
$ operator-sdk init \
    --domain=example.com \
    --repo=github.com/example-inc/{app}-operator
```


The command uses the Go plugin by default.
2. Create an API.

Create a simple {app-proper} API:

```terminal
$ operator-sdk create api \
    --resource=true \
    --controller=true \
    --group {group} \
    --version v1 \
    --kind {app-proper}
```

3. Build and push the Operator image.

Use the default Makefile targets to build and push your Operator. Set IMG with a pull spec for your image that uses a registry you can push to:

```terminal
$ make docker-build docker-push IMG=<registry>/<user>/<image_name>:<tag>
```

4. Run the Operator.
1. Install the CRD:

```terminal
$ make install
```

2. Deploy the project to the cluster. Set IMG to the image that you pushed:

```terminal
$ make deploy IMG=<registry>/<user>/<image_name>:<tag>
```

5. Create a sample custom resource (CR).
1. Create a sample CR:

```terminal
$ oc apply -f config/samples/{group}_v1_{app}.yaml \
    -n {app}-operator-system
```

2. Watch for the CR to reconcile the Operator:

```terminal
$ oc logs deployment.apps/{app}-operator-controller-manager \
    -c manager \
    -n {app}-operator-system
```

6. Delete a CR.

Delete a CR by running the following command:

```terminal
$ oc delete -f config/samples/{group}_v1_{app}.yaml -n {app}-operator-system
```

7. Clean up.

Run the following command to clean up the resources that have been created as part of this procedure:

```terminal
$ make undeploy
```


# Next steps

* See Operator SDK tutorial for Go-based Operators for a more in-depth walkthrough on building a Go-based Operator.
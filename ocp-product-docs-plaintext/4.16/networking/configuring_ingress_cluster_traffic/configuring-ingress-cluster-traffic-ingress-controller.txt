# Configuring ingress cluster traffic using an Ingress Controller


Red Hat OpenShift Container Platform provides methods for communicating from outside the cluster with
services running in the cluster. This method uses an Ingress Controller.

# Creating a project and service

If the project and service that you want to expose do not exist, first create
the project, then the service.

If the project and service already exist, skip to the procedure on exposing the
service to create a route.

* Install the oc CLI and log in as a cluster administrator.

1. Create a new project for your service by running the oc new-project command:

```terminal
$ oc new-project myproject
```

2. Use the oc new-app command to create your service:

```terminal
$ oc new-app nodejs:12~https://github.com/sclorg/nodejs-ex.git
```

3. To verify that the service was created, run the following command:

```terminal
$ oc get svc -n myproject
```

Example output

```terminal
NAME        TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE
nodejs-ex   ClusterIP   172.30.197.157   <none>        8080/TCP   70s
```


By default, the new service does not have an external IP address.

# Exposing the service by creating a route

You can expose the service as a route by using the oc expose command.

To expose the service:

1. Log in to Red Hat OpenShift Container Platform.
2. Log in to the project where the service you want to expose is located:

```terminal
$ oc project myproject
```

3. Run the oc expose service command to expose the route:

```terminal
$ oc expose service nodejs-ex
```

Example output

```terminal
route.route.openshift.io/nodejs-ex exposed
```

4. To verify that the service is exposed, you can use a tool, such as cURL, to make sure the service is accessible from outside the cluster.
1. Use the oc get route command to find the route's host name:

```terminal
$ oc get route
```

Example output

```terminal
NAME        HOST/PORT                        PATH   SERVICES    PORT       TERMINATION   WILDCARD
nodejs-ex   nodejs-ex-myproject.example.com         nodejs-ex   8080-tcp                 None
```

2. Use cURL to check that the host responds to a GET request:

```terminal
$ curl --head nodejs-ex-myproject.example.com
```

Example output

```terminal
HTTP/1.1 200 OK
...
```

# Creating a network policy


As a user with the admin role, you can create a network policy for a namespace.

# Example NetworkPolicy object

The following annotates an example NetworkPolicy object:


```yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: allow-27107 1
spec:
  podSelector: 2
    matchLabels:
      app: mongodb
  ingress:
  - from:
    - podSelector: 3
        matchLabels:
          app: app
    ports: 4
    - protocol: TCP
      port: 27017
```


The name of the NetworkPolicy object.
A selector that describes the pods to which the policy applies.
The policy object can only select pods in the project that defines the NetworkPolicy object.
A selector that matches the pods from which the policy object allows ingress traffic. The selector matches pods in the same namespace as the NetworkPolicy.
A list of one or more destination ports on which to accept traffic.

# Creating a network policy using the CLI

To define granular rules describing ingress or egress network traffic allowed for namespaces in your cluster, you can create a {name} policy.


[NOTE]
----
If you log in with a user with the cluster-admin role, then you can create a network policy in any namespace in the cluster.
----

* Your cluster uses a network plugin that supports NetworkPolicy objects, such as the OVN-Kubernetes network plugin or the OpenShift SDN network plugin with mode: NetworkPolicy set. This mode is the default for OpenShift SDN.
* You installed the OpenShift CLI (oc).
* You are logged in to the cluster with a user with {role} privileges.
* You are working in the namespace that the {name} policy applies to.

1. Create a policy rule:
1. Create a <policy_name>.yaml file:

```terminal
$ touch <policy_name>.yaml
```

where:
<policy_name>:: Specifies the {name} policy file name.
2. Define a {name} policy in the file that you just created, such as in the following examples:
Deny ingress from all pods in all namespaces

This is a fundamental policy, blocking all cross-pod networking other than cross-pod traffic allowed by the configuration of other Network Policies.

```yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: deny-by-default
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  ingress: []
```

Allow ingress from all pods in the same namespace

```yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: allow-same-namespace
spec:
  podSelector:
  ingress:
  - from:
    - podSelector: {}
```

Allow ingress traffic to one pod from a particular namespace

This policy allows traffic to pods labelled pod-a from pods running in namespace-y.

```yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: allow-traffic-pod
spec:
  podSelector:
   matchLabels:
      pod: pod-a
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
           kubernetes.io/metadata.name: namespace-y
```

2. To create the {name} policy object, enter the following command:

```terminal
$ oc apply -f <policy_name>.yaml -n <namespace>
```

where:
<policy_name>:: Specifies the {name} policy file name.
<namespace>:: Optional: Specifies the namespace if the object is defined in a different namespace than the current namespace.
Example output

```terminal
networkpolicy.networking.k8s.io/deny-by-default created
```



[NOTE]
----
If you log in to the web console with cluster-admin privileges, you have a choice of creating a network policy in any namespace in the cluster directly in YAML or from a form in the web console.
----

# Creating a default deny all network policy

This is a fundamental policy, blocking all cross-pod networking other than network traffic allowed by the configuration of other deployed network policies. This procedure enforces a default deny-by-default policy.


[NOTE]
----
If you log in with a user with the cluster-admin role, then you can create a network policy in any namespace in the cluster.
----

* Your cluster uses a network plugin that supports NetworkPolicy objects, such as the OVN-Kubernetes network plugin or the OpenShift SDN network plugin with mode: NetworkPolicy set. This mode is the default for OpenShift SDN.
* You installed the OpenShift CLI (oc).
* You are logged in to the cluster with a user with {role} privileges.
* You are working in the namespace that the {name} policy applies to.

1. Create the following YAML that defines a deny-by-default policy to deny ingress from all pods in all namespaces. Save the YAML in the deny-by-default.yaml file:

```yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: deny-by-default
  namespace: default 1
spec:
  podSelector: {} 2
  ingress: [] 3
```

namespace: default deploys this policy to the default namespace.
podSelector: is empty, this means it matches all the pods. Therefore, the policy applies to all pods in the default namespace.
There are no ingress rules specified. This causes incoming traffic to be dropped to all pods.
2. Apply the policy by entering the following command:

```terminal
$ oc apply -f deny-by-default.yaml
```

Example output

```terminal
networkpolicy.networking.k8s.io/deny-by-default created
```


# Creating a network policy to allow traffic from external clients

With the deny-by-default policy in place you can proceed to configure a policy that allows traffic from external clients to a pod with the label app=web.


[NOTE]
----
If you log in with a user with the cluster-admin role, then you can create a network policy in any namespace in the cluster.
----

Follow this procedure to configure a policy that allows external service from the public Internet directly or by using a Load Balancer to access the pod. Traffic is only allowed to a pod with the label app=web.

* Your cluster uses a network plugin that supports NetworkPolicy objects, such as the OVN-Kubernetes network plugin or the OpenShift SDN network plugin with mode: NetworkPolicy set. This mode is the default for OpenShift SDN.
* You installed the OpenShift CLI (oc).
* You are logged in to the cluster with a user with {role} privileges.
* You are working in the namespace that the {name} policy applies to.

1. Create a policy that allows traffic from the public Internet directly or by using a load balancer to access the pod. Save the YAML in the web-allow-external.yaml file:

```yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: web-allow-external
  namespace: default
spec:
  policyTypes:
  - Ingress
  podSelector:
    matchLabels:
      app: web
  ingress:
    - {}
```

2. Apply the policy by entering the following command:

```terminal
$ oc apply -f web-allow-external.yaml
```

Example output

```terminal
networkpolicy.networking.k8s.io/web-allow-external created
```


This policy allows traffic from all resources, including external traffic as illustrated in the following diagram:

![Allow traffic from external clients]

# Creating a network policy allowing traffic to an application from all namespaces


[NOTE]
----
If you log in with a user with the cluster-admin role, then you can create a network policy in any namespace in the cluster.
----

Follow this procedure to configure a policy that allows traffic from all pods in all namespaces to a particular application.

* Your cluster uses a network plugin that supports NetworkPolicy objects, such as the OVN-Kubernetes network plugin or the OpenShift SDN network plugin with mode: NetworkPolicy set. This mode is the default for OpenShift SDN.
* You installed the OpenShift CLI (oc).
* You are logged in to the cluster with a user with {role} privileges.
* You are working in the namespace that the {name} policy applies to.

1. Create a policy that allows traffic from all pods in all namespaces to a particular application. Save the YAML in the web-allow-all-namespaces.yaml file:

```yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: web-allow-all-namespaces
  namespace: default
spec:
  podSelector:
    matchLabels:
      app: web 1
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector: {} 2
```

Applies the policy only to app:web pods in default namespace.
Selects all pods in all namespaces.

[NOTE]
----
By default, if you omit specifying a namespaceSelector it does not select any namespaces, which means the policy allows traffic only from the namespace the network policy is deployed to.
----
2. Apply the policy by entering the following command:

```terminal
$ oc apply -f web-allow-all-namespaces.yaml
```

Example output

```terminal
networkpolicy.networking.k8s.io/web-allow-all-namespaces created
```


1. Start a web service in the default namespace by entering the following command:

```terminal
$ oc run web --namespace=default --image=nginx --labels="app=web" --expose --port=80
```

2. Run the following command to deploy an alpine image in the secondary namespace and to start a shell:

```terminal
$ oc run test-$RANDOM --namespace=secondary --rm -i -t --image=alpine -- sh
```

3. Run the following command in the shell and observe that the request is allowed:

```terminal
# wget -qO- --timeout=2 http://web.default
```

Expected output

```terminal
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
html { color-scheme: light dark; }
body { width: 35em; margin: 0 auto;
font-family: Tahoma, Verdana, Arial, sans-serif; }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>
```


# Creating a network policy allowing traffic to an application from a namespace


[NOTE]
----
If you log in with a user with the cluster-admin role, then you can create a network policy in any namespace in the cluster.
----

Follow this procedure to configure a policy that allows traffic to a pod with the label app=web from a particular namespace. You might want to do this to:

* Restrict traffic to a production database only to namespaces where production workloads are deployed.
* Enable monitoring tools deployed to a particular namespace to scrape metrics from the current namespace.

* Your cluster uses a network plugin that supports NetworkPolicy objects, such as the OVN-Kubernetes network plugin or the OpenShift SDN network plugin with mode: NetworkPolicy set. This mode is the default for OpenShift SDN.
* You installed the OpenShift CLI (oc).
* You are logged in to the cluster with a user with {role} privileges.
* You are working in the namespace that the {name} policy applies to.

1. Create a policy that allows traffic from all pods in a particular namespaces with a label purpose=production. Save the YAML in the web-allow-prod.yaml file:

```yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: web-allow-prod
  namespace: default
spec:
  podSelector:
    matchLabels:
      app: web 1
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          purpose: production 2
```

Applies the policy only to app:web pods in the default namespace.
Restricts traffic to only pods in namespaces that have the label purpose=production.
2. Apply the policy by entering the following command:

```terminal
$ oc apply -f web-allow-prod.yaml
```

Example output

```terminal
networkpolicy.networking.k8s.io/web-allow-prod created
```


1. Start a web service in the default namespace by entering the following command:

```terminal
$ oc run web --namespace=default --image=nginx --labels="app=web" --expose --port=80
```

2. Run the following command to create the prod namespace:

```terminal
$ oc create namespace prod
```

3. Run the following command to label the prod namespace:

```terminal
$ oc label namespace/prod purpose=production
```

4. Run the following command to create the dev namespace:

```terminal
$ oc create namespace dev
```

5. Run the following command to label the dev namespace:

```terminal
$ oc label namespace/dev purpose=testing
```

6. Run the following command to deploy an alpine image in the dev namespace and to start a shell:

```terminal
$ oc run test-$RANDOM --namespace=dev --rm -i -t --image=alpine -- sh
```

7. Run the following command in the shell and observe that the request is blocked:

```terminal
# wget -qO- --timeout=2 http://web.default
```

Expected output

```terminal
wget: download timed out
```

8. Run the following command to deploy an alpine image in the prod namespace and start a shell:

```terminal
$ oc run test-$RANDOM --namespace=prod --rm -i -t --image=alpine -- sh
```

9. Run the following command in the shell and observe that the request is allowed:

```terminal
# wget -qO- --timeout=2 http://web.default
```

Expected output

```terminal
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
html { color-scheme: light dark; }
body { width: 35em; margin: 0 auto;
font-family: Tahoma, Verdana, Arial, sans-serif; }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>

<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>
```


# Additional resources

* Accessing the web console
* Logging for egress firewall and network policy rules
# Console [operator.openshift.io/v1]


Description:: 
Console provides a means to configure an operator to manage the console.
 Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).
Type:: object
Required:: 
* spec

# Specification



## .spec

Description:: 
ConsoleSpec is the specification of the desired behavior of the Console.
Type:: object



## .spec.customization

Description:: 
customization is used to optionally provide a small set of customization options to the web console.
Type:: object



## .spec.customization.addPage

Description:: 
addPage allows customizing actions on the Add page in developer perspective.
Type:: object



## .spec.customization.customLogoFile

Description:: 
customLogoFile replaces the default OpenShift logo in the masthead and about dialog. It is a reference to a ConfigMap in the openshift-config namespace. This can be created with a command like 'oc create configmap custom-logo --from-file=/path/to/file -n openshift-config'. Image size must be less than 1 MB due to constraints on the ConfigMap size. The ConfigMap key should include a file extension so that the console serves the file with the correct MIME type. Recommended logo specifications: Dimensions: Max height of 68px and max width of 200px SVG format preferred
Type:: object



## .spec.customization.developerCatalog

Description:: 
developerCatalog allows to configure the shown developer catalog categories (filters) and types (sub-catalogs).
Type:: object



## .spec.customization.developerCatalog.categories

Description:: 
categories which are shown in the developer catalog.
Type:: array

## .spec.customization.developerCatalog.categories[]

Description:: 
DeveloperConsoleCatalogCategory for the developer console catalog.
Type:: object
Required:: 
* id
* label



## .spec.customization.developerCatalog.categories[].subcategories

Description:: 
subcategories defines a list of child categories.
Type:: array

## .spec.customization.developerCatalog.categories[].subcategories[]

Description:: 
DeveloperConsoleCatalogCategoryMeta are the key identifiers of a developer catalog category.
Type:: object
Required:: 
* id
* label



## .spec.customization.developerCatalog.types

Description:: 
types allows enabling or disabling of sub-catalog types that user can see in the Developer catalog. When omitted, all the sub-catalog types will be shown.
Type:: object
Required:: 
* state



## .spec.customization.perspectives

Description:: 
perspectives allows enabling/disabling of perspective(s) that user can see in the Perspective switcher dropdown.
Type:: array

## .spec.customization.perspectives[]

Description:: 
Perspective defines a perspective that cluster admins want to show/hide in the perspective switcher dropdown
Type:: object
Required:: 
* id
* visibility



## .spec.customization.perspectives[].pinnedResources

Description:: 
pinnedResources defines the list of default pinned resources that users will see on the perspective navigation if they have not customized these pinned resources themselves. The list of available Kubernetes resources could be read via kubectl api-resources. The console will also provide a configuration UI and a YAML snippet that will list the available resources that can be pinned to the navigation. Incorrect or unknown resources will be ignored.
Type:: array

## .spec.customization.perspectives[].pinnedResources[]

Description:: 
PinnedResourceReference includes the group, version and type of resource
Type:: object
Required:: 
* group
* resource
* version



## .spec.customization.perspectives[].visibility

Description:: 
visibility defines the state of perspective along with access review checks if needed for that perspective.
Type:: object
Required:: 
* state



## .spec.customization.perspectives[].visibility.accessReview

Description:: 
accessReview defines required and missing access review checks.
Type:: object



## .spec.customization.perspectives[].visibility.accessReview.missing

Description:: 
missing defines a list of permission checks. The perspective will only be shown when at least one check fails. When omitted, the access review is skipped and the perspective will not be shown unless it is required to do so based on the configuration of the required access review list.
Type:: array

## .spec.customization.perspectives[].visibility.accessReview.missing[]

Description:: 
ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface
Type:: object



## .spec.customization.perspectives[].visibility.accessReview.required

Description:: 
required defines a list of permission checks. The perspective will only be shown when all checks are successful. When omitted, the access review is skipped and the perspective will not be shown unless it is required to do so based on the configuration of the missing access review list.
Type:: array

## .spec.customization.perspectives[].visibility.accessReview.required[]

Description:: 
ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface
Type:: object



## .spec.customization.projectAccess

Description:: 
projectAccess allows customizing the available list of ClusterRoles in the Developer perspective Project access page which can be used by a project admin to specify roles to other users and restrict access within the project. If set, the list will replace the default ClusterRole options.
Type:: object



## .spec.customization.quickStarts

Description:: 
quickStarts allows customization of available ConsoleQuickStart resources in console.
Type:: object



## .spec.providers

Description:: 
providers contains configuration for using specific service providers.
Type:: object



## .spec.providers.statuspage

Description:: 
statuspage contains ID for statuspage.io page that provides status info about.
Type:: object



## .spec.route

Description:: 
route contains hostname and secret reference that contains the serving certificate. If a custom route is specified, a new route will be created with the provided hostname, under which console will be available. In case of custom hostname uses the default routing suffix of the cluster, the Secret specification for a serving certificate will not be needed. In case of custom hostname points to an arbitrary domain, manual DNS configurations steps are necessary. The default console route will be maintained to reserve the default hostname for console if the custom route is removed. If not specified, default route will be used. DEPRECATED
Type:: object



## .spec.route.secret

Description:: 
secret points to secret in the openshift-config namespace that contains custom certificate and key and needs to be created manually by the cluster admin. Referenced Secret is required to contain following key value pairs: - "tls.crt" - to specifies custom certificate - "tls.key" - to specifies private key of the custom certificate If the custom hostname uses the default routing suffix of the cluster, the Secret specification for a serving certificate will not be needed.
Type:: object
Required:: 
* name



## .status

Description:: 
ConsoleStatus defines the observed status of the Console.
Type:: object



## .status.conditions

Description:: 
conditions is a list of conditions and their status
Type:: array

## .status.conditions[]

Description:: 
OperatorCondition is just the standard condition fields.
Type:: object



## .status.generations

Description:: 
generations are used to determine when an item needs to be reconciled or has changed in a way that needs a reaction.
Type:: array

## .status.generations[]

Description:: 
GenerationStatus keeps track of the generation for a given resource so that decisions about forced updates can be made.
Type:: object



# API endpoints

The following API endpoints are available:

* /apis/operator.openshift.io/v1/consoles
* DELETE: delete collection of Console
* GET: list objects of kind Console
* POST: create a Console
* /apis/operator.openshift.io/v1/consoles/{name}
* DELETE: delete a Console
* GET: read the specified Console
* PATCH: partially update the specified Console
* PUT: replace the specified Console
* /apis/operator.openshift.io/v1/consoles/{name}/status
* GET: read status of the specified Console
* PATCH: partially update status of the specified Console
* PUT: replace status of the specified Console

## /apis/operator.openshift.io/v1/consoles

HTTP method:: DELETE
Description:: delete collection of Console



HTTP method:: GET
Description:: list objects of kind Console



HTTP method:: POST
Description:: create a Console







## /apis/operator.openshift.io/v1/consoles/{name}



HTTP method:: DELETE
Description:: delete a Console





HTTP method:: GET
Description:: read the specified Console



HTTP method:: PATCH
Description:: partially update the specified Console





HTTP method:: PUT
Description:: replace the specified Console







## /apis/operator.openshift.io/v1/consoles/{name}/status



HTTP method:: GET
Description:: read status of the specified Console



HTTP method:: PATCH
Description:: partially update status of the specified Console





HTTP method:: PUT
Description:: replace status of the specified Console






# MachineConfigPool [machineconfiguration.openshift.io/v1]


Description:: 
MachineConfigPool describes a pool of MachineConfigs.
 Compatibility level 1: Stable within a major release for a minimum of 12 months or 3 minor releases (whichever is longer).
Type:: object
Required:: 
* spec

# Specification



## .spec

Description:: 
MachineConfigPoolSpec is the spec for MachineConfigPool resource.
Type:: object



## .spec.configuration

Description:: 
The targeted MachineConfig object for the machine config pool.
Type:: object



## .spec.configuration.source

Description:: 
source is the list of MachineConfig objects that were used to generate the single MachineConfig object specified in content.
Type:: array

## .spec.configuration.source[]

Description:: 
ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control.
 Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
Type:: object



## .spec.machineConfigSelector

Description:: 
machineConfigSelector specifies a label selector for MachineConfigs. Refer https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/ on how label and selectors work.
Type:: object



## .spec.machineConfigSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.machineConfigSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
Type:: object
Required:: 
* key
* operator



## .spec.nodeSelector

Description:: 
nodeSelector specifies a label selector for Machines
Type:: object



## .spec.nodeSelector.matchExpressions

Description:: 
matchExpressions is a list of label selector requirements. The requirements are ANDed.
Type:: array

## .spec.nodeSelector.matchExpressions[]

Description:: 
A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
Type:: object
Required:: 
* key
* operator



## .status

Description:: 
MachineConfigPoolStatus is the status for MachineConfigPool resource.
Type:: object



## .status.certExpirys

Description:: 
certExpirys keeps track of important certificate expiration data
Type:: array

## .status.certExpirys[]

Description:: 
ceryExpiry contains the bundle name and the expiry date
Type:: object
Required:: 
* bundle
* subject



## .status.conditions

Description:: 
conditions represents the latest available observations of current state.
Type:: array

## .status.conditions[]

Description:: 
MachineConfigPoolCondition contains condition information for an MachineConfigPool.
Type:: object



## .status.configuration

Description:: 
configuration represents the current MachineConfig object for the machine config pool.
Type:: object



## .status.configuration.source

Description:: 
source is the list of MachineConfig objects that were used to generate the single MachineConfig object specified in content.
Type:: array

## .status.configuration.source[]

Description:: 
ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs. 1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage. 2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted". Those cannot be well described when embedded. 3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen. 4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant. 5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control.
 Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
Type:: object



# API endpoints

The following API endpoints are available:

* /apis/machineconfiguration.openshift.io/v1/machineconfigpools
* DELETE: delete collection of MachineConfigPool
* GET: list objects of kind MachineConfigPool
* POST: create a MachineConfigPool
* /apis/machineconfiguration.openshift.io/v1/machineconfigpools/{name}
* DELETE: delete a MachineConfigPool
* GET: read the specified MachineConfigPool
* PATCH: partially update the specified MachineConfigPool
* PUT: replace the specified MachineConfigPool
* /apis/machineconfiguration.openshift.io/v1/machineconfigpools/{name}/status
* GET: read status of the specified MachineConfigPool
* PATCH: partially update status of the specified MachineConfigPool
* PUT: replace status of the specified MachineConfigPool

## /apis/machineconfiguration.openshift.io/v1/machineconfigpools

HTTP method:: DELETE
Description:: delete collection of MachineConfigPool



HTTP method:: GET
Description:: list objects of kind MachineConfigPool



HTTP method:: POST
Description:: create a MachineConfigPool







## /apis/machineconfiguration.openshift.io/v1/machineconfigpools/{name}



HTTP method:: DELETE
Description:: delete a MachineConfigPool





HTTP method:: GET
Description:: read the specified MachineConfigPool



HTTP method:: PATCH
Description:: partially update the specified MachineConfigPool





HTTP method:: PUT
Description:: replace the specified MachineConfigPool







## /apis/machineconfiguration.openshift.io/v1/machineconfigpools/{name}/status



HTTP method:: GET
Description:: read status of the specified MachineConfigPool



HTTP method:: PATCH
Description:: partially update status of the specified MachineConfigPool





HTTP method:: PUT
Description:: replace status of the specified MachineConfigPool






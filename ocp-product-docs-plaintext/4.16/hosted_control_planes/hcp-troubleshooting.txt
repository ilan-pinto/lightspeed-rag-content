# Troubleshooting hosted control planes


If you encounter issues with hosted control planes, see the following information to guide you through troubleshooting.

# Gathering information to troubleshoot hosted control planes

When you need to troubleshoot an issue with hosted control plane clusters, you can gather information by running the hypershift dump cluster command. The command generates output for the management cluster and the hosted cluster.

The output for the management cluster contains the following content:

* Cluster-scoped resources: These resources are node definitions of the management cluster.
* The hypershift-dump compressed file: This file is useful if you need to share the content with other people.
* Namespaced resources: These resources include all of the objects from the relevant namespaces, such as config maps, services, events, and logs.
* Network logs: These logs include the OVN northbound and southbound databases and the status for each one.
* Hosted clusters: This level of output involves all of the resources inside of the hosted cluster.

The output for the hosted cluster contains the following content:

* Cluster-scoped resources: These resources include all of the cluster-wide objects, such as nodes and CRDs.
* Namespaced resources: These resources include all of the objects from the relevant namespaces, such as config maps, services, events, and logs.

Although the output does not contain any secret objects from the cluster, it can contain references to the names of secrets.

* You must have cluster-admin access to the management cluster.
* You need the name value for the HostedCluster resource and the namespace where the CR is deployed.
* You must have the hcp command line interface installed. For more information, see Installing the hosted control planes command line interface.
* You must have the OpenShift CLI (oc) installed.
* You must ensure that the kubeconfig file is loaded and is pointing to the management cluster.

* To gather the output for troubleshooting, enter the following command:

```terminal
$ hypershift dump cluster \
    --name <hosted_cluster_name> \1
    --namespace <hosted_cluster_namespace> \ 2
    --dump-guest-cluster \
    --artifact-dir clusterDump-<hosted_cluster_namespace>-<hosted_cluster_name>
```

Specify your hosted cluster name.
Specify your hosted cluster namespace, for example, clusters.
Example output

```terminal
2023-06-06T12:18:20+02:00   INFO    Archiving dump  {"command": "tar", "args": ["-cvzf", "hypershift-dump.tar.gz", "cluster-scoped-resources", "event-filter.html", "namespaces", "network_logs", "timestamp"]}
2023-06-06T12:18:21+02:00   INFO    Successfully archived dump  {"duration": "1.519376292s"}
```

* To configure the command-line interface so that it impersonates all of the queries against the management cluster by using a username or service account, enter the hypershift dump cluster command with the --as flag.

The service account must have enough permissions to query all of the objects from the namespaces, so the cluster-admin role is recommended to make sure you have enough permissions. The service account must be located in or have permissions to query the namespace of the HostedControlPlane resource.

If your username or service account does not have enough permissions, the output contains only the objects that you have permissions to access. During that process, you might see forbidden errors.
* To use impersonation by using a service account, enter the following command:

```terminal
$ hypershift dump cluster \
    --name <hosted_cluster_name> \1
    --namespace <hosted_cluster_namespace> \2
    --dump-guest-cluster \
    --as "system:serviceaccount:<service_account_namespace>:<service_account_name>" \ 3
    --artifact-dir clusterDump-<hosted_cluster_namespace>-<hosted_cluster_name>
```

Specify your hosted cluster name.
Specify your hosted cluster namespace, for example, clusters.
Specify the default namespace and name, for example, "system:serviceaccount:default:samplesa".
* To use impersonation by using a username, enter the following command:

```terminal
$ hypershift dump cluster \
    --name <hosted_cluster_name> \1
    --namespace <hosted_cluster_namespace> \2
    --dump-guest-cluster \
    --as "<cluster_user_name>" \ 3
    --artifact-dir clusterDump-<hosted_cluster_namespace>-<hosted_cluster_name>
```

Specify your hosted cluster name.
Specify your hosted cluster namespace, for example, clusters.
Specify your cluster user name, for example, cloud-admin.

# Pausing the reconciliation of a hosted cluster and hosted control plane

If you are a cluster instance administrator, you can pause the reconciliation of a hosted cluster and hosted control plane. You might want to pause reconciliation when you back up and restore an etcd database or when you need to debug problems with a hosted cluster or hosted control plane.

1. To pause reconciliation for a hosted cluster and hosted control plane, populate the pausedUntil field of the HostedCluster resource.
* To pause the reconciliation until a specific time, enter the following command:

```terminal
$ oc patch -n <hosted_cluster_namespace> hostedclusters/<hosted_cluster_name> -p '{"spec":{"pausedUntil":"<timestamp>"}}' --type=merge 1
```

Specify a timestamp in the RFC339 format, for example, 2024-03-03T03:28:48Z. The reconciliation is paused until the specified time is passed.
* To pause the reconciliation indefinitely, enter the following command:

```terminal
$ oc patch -n <hosted_cluster_namespace> hostedclusters/<hosted_cluster_name> -p '{"spec":{"pausedUntil":"true"}}' --type=merge
```


The reconciliation is paused until you remove the field from the HostedCluster resource.

When the pause reconciliation field is populated for the HostedCluster resource, the field is automatically added to the associated HostedControlPlane resource.
2. To remove the pausedUntil field, enter the following patch command:

```terminal
$ oc patch -n <hosted_cluster_namespace> hostedclusters/<hosted_cluster_name> -p '{"spec":{"pausedUntil":null}}' --type=merge
```


# Scaling down the data plane to zero

If you are not using the hosted control plane, to save the resources and cost you can scale down a data plane to zero.


[NOTE]
----
Ensure you are prepared to scale down the data plane to zero. Because the workload from the worker nodes disappears after scaling down.
----

1. Set the kubeconfig file to access the hosted cluster by running the following command:

```terminal
$ export KUBECONFIG=<install_directory>/auth/kubeconfig
```

2. Get the name of the NodePool resource associated to your hosted cluster by running the following command:

```terminal
$ oc get nodepool --namespace <HOSTED_CLUSTER_NAMESPACE>
```

3. Optional: To prevent the pods from draining, add the nodeDrainTimeout field in the NodePool resource by running the following command:

```terminal
$ oc edit NodePool <nodepool> -o yaml --namespace <HOSTED_CLUSTER_NAMESPACE>
```

Example output

```yaml
apiVersion: hypershift.openshift.io/v1alpha1
kind: NodePool
metadata:
# ...
  name: nodepool-1
  namespace: clusters
# ...
spec:
  arch: amd64
  clusterName: clustername 1
  management:
    autoRepair: false
    replace:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 0
      strategy: RollingUpdate
    upgradeType: Replace
  nodeDrainTimeout: 0s 2
# ...
```

Defines the name of your hosted cluster.
Specifies the total amount of time that the controller spends to drain a node. By default, the nodeDrainTimeout: 0s setting blocks the node draining process.

[NOTE]
----
To allow the node draining process to continue for a certain period of time, you can set the value of the nodeDrainTimeout field accordingly, for example, nodeDrainTimeout: 1m.
----
4. Scale down the NodePool resource associated to your hosted cluster by running the following command:

```terminal
$ oc scale nodepool/<NODEPOOL_NAME> --namespace <HOSTED_CLUSTER_NAMESPACE> --replicas=0
```


[NOTE]
----
After scaling down the data plan to zero, some pods in the control plane stay in the Pending status and the hosted control plane stays up and running. If necessary, you can scale up the NodePool resource.
----
5. Optional: Scale up the NodePool resource associated to your hosted cluster by running the following command:

```terminal
$ oc scale nodepool/<NODEPOOL_NAME> --namespace <HOSTED_CLUSTER_NAMESPACE> --replicas=1
```


After rescaling the NodePool resource,  wait for couple of minutes for the NodePool resource to become available in a Ready state.

* Verify that the value for the nodeDrainTimeout field is greater than 0s by running the following command:

```terminal
$ oc get nodepool -n <hosted_cluster_namespace> <nodepool_name> -ojsonpath='{.spec.nodeDrainTimeout}'
```


* Must-gather for a hosted cluster
# FlowCollector configuration parameters


FlowCollector is the Schema for the network flows collection API, which pilots and configures the underlying deployments.

# FlowCollector API specifications

Description:: 
FlowCollector is the schema for the network flows collection API, which pilots and configures the underlying deployments.
Type:: object



## .metadata

Description:: 
Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
Type:: object

## .spec

Description:: 
Defines the desired state of the FlowCollector resource.

 *: the mention of "unsupported", or "deprecated" for a feature throughout this document means that this feature is not officially supported by Red Hat. It might have been, for example, contributed by the community and accepted without a formal agreement for maintenance. The product maintainers might provide some support for these features as a best effort only.
Type:: object



## .spec.agent

Description:: 
Agent configuration for flows extraction.
Type:: object



## .spec.agent.ebpf

Description:: 
ebpf describes the settings related to the eBPF-based flow reporter when spec.agent.type is set to eBPF.
Type:: object



## .spec.agent.ebpf.advanced

Description:: 
advanced allows setting some aspects of the internal configuration of the eBPF agent. This section is aimed mostly for debugging and fine-grained performance optimizations, such as GOGC and GOMAXPROCS env vars. Set these values at your own risk.
Type:: object



## .spec.agent.ebpf.resources

Description:: 
resources are the compute resources required by this container. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
Type:: object



## .spec.agent.ipfix

Description:: 
ipfix [deprecated (*)] - describes the settings related to the IPFIX-based flow reporter when spec.agent.type is set to IPFIX.
Type:: object



## .spec.agent.ipfix.clusterNetworkOperator

Description:: 
clusterNetworkOperator defines the settings related to the Red Hat OpenShift Container Platform Cluster Network Operator, when available.
Type:: object



## .spec.agent.ipfix.ovnKubernetes

Description:: 
ovnKubernetes defines the settings of the OVN-Kubernetes CNI, when available. This configuration is used when using OVN's IPFIX exports, without Red Hat OpenShift Container Platform. When using Red Hat OpenShift Container Platform, refer to the clusterNetworkOperator property instead.
Type:: object



## .spec.consolePlugin

Description:: 
consolePlugin defines the settings related to the Red Hat OpenShift Container Platform Console plugin, when available.
Type:: object



## .spec.consolePlugin.advanced

Description:: 
advanced allows setting some aspects of the internal configuration of the console plugin. This section is aimed mostly for debugging and fine-grained performance optimizations, such as GOGC and GOMAXPROCS env vars. Set these values at your own risk.
Type:: object



## .spec.consolePlugin.autoscaler

Description:: 
autoscaler spec of a horizontal pod autoscaler to set up for the plugin Deployment. Refer to HorizontalPodAutoscaler documentation (autoscaling/v2).
Type:: object

## .spec.consolePlugin.portNaming

Description:: 
portNaming defines the configuration of the port-to-service name translation
Type:: object



## .spec.consolePlugin.quickFilters

Description:: 
quickFilters configures quick filter presets for the Console plugin
Type:: array

## .spec.consolePlugin.quickFilters[]

Description:: 
QuickFilter defines preset configuration for Console's quick filters
Type:: object
Required:: 
* filter
* name



## .spec.consolePlugin.resources

Description:: 
resources, in terms of compute resources, required by this container. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
Type:: object



## .spec.exporters

Description:: 
exporters define additional optional exporters for custom consumption or storage.
Type:: array

## .spec.exporters[]

Description:: 
FlowCollectorExporter defines an additional exporter to send enriched flows to.
Type:: object
Required:: 
* type



## .spec.exporters[].ipfix

Description:: 
IPFIX configuration, such as the IP address and port to send enriched IPFIX flows to.
Type:: object
Required:: 
* targetHost
* targetPort



## .spec.exporters[].kafka

Description:: 
Kafka configuration, such as the address and topic, to send enriched flows to.
Type:: object
Required:: 
* address
* topic



## .spec.exporters[].kafka.sasl

Description:: 
SASL authentication configuration. [Unsupported (*)].
Type:: object



## .spec.exporters[].kafka.sasl.clientIDReference

Description:: 
Reference to the secret or config map containing the client ID
Type:: object



## .spec.exporters[].kafka.sasl.clientSecretReference

Description:: 
Reference to the secret or config map containing the client secret
Type:: object



## .spec.exporters[].kafka.tls

Description:: 
TLS client configuration. When using TLS, verify that the address matches the Kafka port used for TLS, generally 9093.
Type:: object



## .spec.exporters[].kafka.tls.caCert

Description:: 
caCert defines the reference of the certificate for the Certificate Authority
Type:: object



## .spec.exporters[].kafka.tls.userCert

Description:: 
userCert defines the user certificate reference and is used for mTLS (you can ignore it when using one-way TLS)
Type:: object



## .spec.kafka

Description:: 
Kafka configuration, allowing to use Kafka as a broker as part of the flow collection pipeline. Available when the spec.deploymentModel is Kafka.
Type:: object
Required:: 
* address
* topic



## .spec.kafka.sasl

Description:: 
SASL authentication configuration. [Unsupported (*)].
Type:: object



## .spec.kafka.sasl.clientIDReference

Description:: 
Reference to the secret or config map containing the client ID
Type:: object



## .spec.kafka.sasl.clientSecretReference

Description:: 
Reference to the secret or config map containing the client secret
Type:: object



## .spec.kafka.tls

Description:: 
TLS client configuration. When using TLS, verify that the address matches the Kafka port used for TLS, generally 9093.
Type:: object



## .spec.kafka.tls.caCert

Description:: 
caCert defines the reference of the certificate for the Certificate Authority
Type:: object



## .spec.kafka.tls.userCert

Description:: 
userCert defines the user certificate reference and is used for mTLS (you can ignore it when using one-way TLS)
Type:: object



## .spec.loki

Description:: 
loki, the flow store, client settings.
Type:: object



## .spec.loki.advanced

Description:: 
advanced allows setting some aspects of the internal configuration of the Loki clients. This section is aimed mostly for debugging and fine-grained performance optimizations.
Type:: object



## .spec.loki.lokiStack

Description:: 
Loki configuration for LokiStack mode. This is useful for an easy loki-operator configuration. It is ignored for other modes.
Type:: object



## .spec.loki.manual

Description:: 
Loki configuration for Manual mode. This is the most flexible configuration. It is ignored for other modes.
Type:: object



## .spec.loki.manual.statusTls

Description:: 
TLS client configuration for Loki status URL.
Type:: object



## .spec.loki.manual.statusTls.caCert

Description:: 
caCert defines the reference of the certificate for the Certificate Authority
Type:: object



## .spec.loki.manual.statusTls.userCert

Description:: 
userCert defines the user certificate reference and is used for mTLS (you can ignore it when using one-way TLS)
Type:: object



## .spec.loki.manual.tls

Description:: 
TLS client configuration for Loki URL.
Type:: object



## .spec.loki.manual.tls.caCert

Description:: 
caCert defines the reference of the certificate for the Certificate Authority
Type:: object



## .spec.loki.manual.tls.userCert

Description:: 
userCert defines the user certificate reference and is used for mTLS (you can ignore it when using one-way TLS)
Type:: object



## .spec.loki.microservices

Description:: 
Loki configuration for Microservices mode. Use this option when Loki is installed using the microservices deployment mode (https://grafana.com/docs/loki/latest/fundamentals/architecture/deployment-modes/#microservices-mode). It is ignored for other modes.
Type:: object



## .spec.loki.microservices.tls

Description:: 
TLS client configuration for Loki URL.
Type:: object



## .spec.loki.microservices.tls.caCert

Description:: 
caCert defines the reference of the certificate for the Certificate Authority
Type:: object



## .spec.loki.microservices.tls.userCert

Description:: 
userCert defines the user certificate reference and is used for mTLS (you can ignore it when using one-way TLS)
Type:: object



## .spec.loki.monolithic

Description:: 
Loki configuration for Monolithic mode. Use this option when Loki is installed using the monolithic deployment mode (https://grafana.com/docs/loki/latest/fundamentals/architecture/deployment-modes/#monolithic-mode). It is ignored for other modes.
Type:: object



## .spec.loki.monolithic.tls

Description:: 
TLS client configuration for Loki URL.
Type:: object



## .spec.loki.monolithic.tls.caCert

Description:: 
caCert defines the reference of the certificate for the Certificate Authority
Type:: object



## .spec.loki.monolithic.tls.userCert

Description:: 
userCert defines the user certificate reference and is used for mTLS (you can ignore it when using one-way TLS)
Type:: object



## .spec.processor

Description:: 
processor defines the settings of the component that receives the flows from the agent, enriches them, generates metrics, and forwards them to the Loki persistence layer and/or any available exporter.
Type:: object



## .spec.processor.advanced

Description:: 
advanced allows setting some aspects of the internal configuration of the flow processor. This section is aimed mostly for debugging and fine-grained performance optimizations, such as GOGC and GOMAXPROCS env vars. Set these values at your own risk.
Type:: object



## .spec.processor.kafkaConsumerAutoscaler

Description:: 
kafkaConsumerAutoscaler is the spec of a horizontal pod autoscaler to set up for flowlogs-pipeline-transformer, which consumes Kafka messages. This setting is ignored when Kafka is disabled. Refer to HorizontalPodAutoscaler documentation (autoscaling/v2).
Type:: object

## .spec.processor.metrics

Description:: 
Metrics define the processor configuration regarding metrics
Type:: object



## .spec.processor.metrics.server

Description:: 
Metrics server endpoint configuration for Prometheus scraper
Type:: object



## .spec.processor.metrics.server.tls

Description:: 
TLS configuration.
Type:: object



## .spec.processor.metrics.server.tls.provided

Description:: 
TLS configuration when type is set to Provided.
Type:: object



## .spec.processor.metrics.server.tls.providedCaFile

Description:: 
Reference to the CA file when type is set to Provided.
Type:: object



## .spec.processor.resources

Description:: 
resources are the compute resources required by this container. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
Type:: object


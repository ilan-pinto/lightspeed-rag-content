# About Operator Lifecycle Manager 1.0 (Technology Preview)


Operator Lifecycle Manager (OLM) has been included with Red Hat OpenShift Container Platform 4 since its initial release. Red Hat OpenShift Container Platform 4.16 includes components for a next-generation iteration of OLM as a Technology Preview feature, known during this phase as OLM 1.0. This updated framework evolves many of the concepts that have been part of previous versions of OLM and adds new capabilities.

[IMPORTANT]
----
OLM 1.0 is a Technology Preview feature only. Technology Preview features are not supported with Red Hat production service level agreements (SLAs) and might not be functionally complete. Red Hat does not recommend using them in production. These features provide early access to upcoming product features, enabling customers to test functionality and provide feedback during the development process.
For more information about the support scope of Red Hat Technology Preview features, see Technology Preview Features Support Scope.
----

# Highlights

During this Technology Preview phase of OLM 1.0 in Red Hat OpenShift Container Platform 4.16, administrators can explore the following highlights:

Fully declarative model that supports GitOps workflows:: OLM 1.0 simplifies extension management through two key APIs:
* A new ClusterExtension API streamlines management of installed extensions, which includes Operators via the registry+v1 bundle format, by consolidating user-facing APIs into a single object. This API, provided as clusterextension.olm.operatorframework.io by the new Operator Controller component, empowers administrators and SREs to automate processes and define desired states by using GitOps principles.

[NOTE]
----
Earlier Technology Preview phases of OLM 1.0 introduced a new Operator API; this API is renamed ClusterExtension in Red Hat OpenShift Container Platform 4.16 to address the following:
* Signals that OLM 1.0 encompasses more than only Operators
* Avoids the issue of the separate Operator API available in legacy OLM, which caused user experience conflicts, for example with oc <verb> operators commands
* Cluster prefix clearly indicates that ClusterExtension objects are cluster-scoped, a change from legacy OLM where Operators could be either namespace-scoped or cluster-scoped
----
* The Catalog API, provided by the new catalogd component, serves as the foundation for OLM 1.0, unpacking catalogs for on-cluster clients so that users can discover installable content, such as Kubernetes extensions and Operators. This provides increased visibility into all available Operator bundle versions, including their details, channels, and update edges.

For more information, see Operator Controller and Catalogd.
Improved control over extension updates:: With improved insight into catalog content, administrators can specify target versions for installation and updates. This grants administrators more control over the target version of extension updates. For more information, see Updating an Operator.
Flexible extension packaging format:: Administrators can use file-based catalogs to install and manage extensions, such as OLM-based Operators, similar to the legacy OLM experience.

In addition, bundle size is no longer constrained by the etcd value size limit. For more information, see Installing an Operator from a catalog.

# Purpose

The mission of Operator Lifecycle Manager (OLM) has been to manage the lifecycle of cluster extensions centrally and declaratively on Kubernetes clusters. Its purpose has always been to make installing, running, and updating functional extensions to the cluster easy, safe, and reproducible for cluster and platform-as-a-service (PaaS) administrators throughout the lifecycle of the underlying cluster.

The initial version of OLM, which launched with Red Hat OpenShift Container Platform 4 and is included by default, focused on providing unique support for these specific needs for a particular type of cluster extension, known as Operators. Operators are classified as one or more Kubernetes controllers, shipping with one or more API extensions, as CustomResourceDefinition (CRD) objects, to provide additional functionality to the cluster.

After running in production clusters for many releases, the next-generation of OLM aims to encompass lifecycles for cluster extensions that are not just Operators.
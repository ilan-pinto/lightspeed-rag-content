# Getting started with Operator SDK for Java-based Operators


[IMPORTANT]
----
Java-based Operator SDK is a Technology Preview feature only. Technology Preview features are not supported with Red Hat production service level agreements (SLAs) and might not be functionally complete. Red Hat does not recommend using them in production. These features provide early access to upcoming product features, enabling customers to test functionality and provide feedback during the development process.
For more information about the support scope of Red Hat Technology Preview features, see Technology Preview Features Support Scope.
----

To demonstrate the basics of setting up and running a Java-based Operator using tools and libraries provided by the Operator SDK, Operator developers can build an example Java-based Operator for Memcached, a distributed key-value store, and deploy it to a cluster.

# Prerequisites

* Operator SDK CLI installed
* OpenShift CLI (oc) 4.16+ installed
* Java 11+
* Maven 3.6.3+
* Logged into an Red Hat OpenShift Container Platform 4.16 cluster with oc with an account that has cluster-admin permissions
* To allow the cluster to pull the image, the repository where you push your image must be set as public, or you must configure an image pull secret

* Installing the Operator SDK CLI
* Getting started with the OpenShift CLI

# Creating and deploying Java-based Operators

You can build and deploy a simple {type}-based Operator for {app-proper} by using the Operator SDK.

1. Create a project.
1. Create your project directory:

```terminal
$ mkdir {app}-operator
```

2. Change into the project directory:

```terminal
$ cd {app}-operator
```

3. Run the operator-sdk init command
with the quarkus plugin
to initialize the project:

```terminal
$ operator-sdk init \
    --plugins=quarkus \
    --domain=example.com \
    --project-name=memcached-operator
```

2. Create an API.

Create a simple {app-proper} API:

```terminal
$ operator-sdk create api \
    --plugins quarkus \
    --group {group} \
    --version v1 \
    --kind {app-proper}
```

3. Build and push the Operator image.

Use the default Makefile targets to build and push your Operator. Set IMG with a pull spec for your image that uses a registry you can push to:

```terminal
$ make docker-build docker-push IMG=<registry>/<user>/<image_name>:<tag>
```

4. Run the Operator.
1. Install the CRD:

```terminal
$ make install
```

2. Deploy the project to the cluster. Set IMG to the image that you pushed:

```terminal
$ make deploy IMG=<registry>/<user>/<image_name>:<tag>
```

5. Create a sample custom resource (CR).
1. Create a sample CR:

```terminal
$ oc apply -f config/samples/{group}_v1_{app}.yaml \
    -n {app}-operator-system
```

2. Watch for the CR to reconcile the Operator:

```terminal
$ oc logs deployment.apps/{app}-operator-controller-manager \
    -c manager \
    -n {app}-operator-system
```

6. Delete a CR.

Delete a CR by running the following command:

```terminal
$ oc delete -f config/samples/{group}_v1_{app}.yaml -n {app}-operator-system
```

7. Clean up.

Run the following command to clean up the resources that have been created as part of this procedure:

```terminal
$ make undeploy
```


# Next steps

* See Operator SDK tutorial for Java-based Operators for a more in-depth walkthrough on building a Java-based Operator.
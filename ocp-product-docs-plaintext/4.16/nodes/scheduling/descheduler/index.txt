# Descheduler overview


While the scheduler is used to determine the most suitable node to host a new pod, the descheduler can be used to evict a running pod so that the pod can be rescheduled onto a more suitable node.

# About the descheduler

You can use the descheduler to evict pods based on specific strategies so that the pods can be rescheduled onto more appropriate nodes.

You can benefit from descheduling running pods in situations such as the following:

* Nodes are underutilized or overutilized.
* Pod and node affinity requirements, such as taints or labels, have changed and the original scheduling decisions are no longer appropriate for certain nodes.
* Node failure requires pods to be moved.
* New nodes are added to clusters.
* Pods have been restarted too many times.


[IMPORTANT]
----
The descheduler does not schedule replacement of evicted pods. The scheduler automatically performs this task for the evicted pods.
----

When the descheduler decides to evict pods from a node, it employs the following general mechanism:

* Pods in the openshift-* and kube-system namespaces are never evicted.
* Critical pods with priorityClassName set to system-cluster-critical or system-node-critical are never evicted.
* Static, mirrored, or stand-alone pods that are not part of a replication controller, replica set, deployment, or job are never evicted because these pods will not be recreated.
* Pods associated with daemon sets are never evicted.
* Pods with local storage are never evicted.
* Best effort pods are evicted before burstable and guaranteed pods.
* All types of pods with the descheduler.alpha.kubernetes.io/evict annotation are eligible for eviction. This annotation is used to override checks that prevent eviction, and the user can select which pod is evicted. Users should know how and if the pod will be recreated.
* Pods subject to pod disruption budget (PDB) are not evicted if descheduling violates its pod disruption budget (PDB). The pods are evicted by using eviction subresource to handle PDB.

# Descheduler profiles

The following descheduler profiles are available:

AffinityAndTaints:: This profile evicts pods that violate inter-pod anti-affinity, node affinity, and node taints.

It enables the following strategies:
* RemovePodsViolatingInterPodAntiAffinity: removes pods that are violating inter-pod anti-affinity.
* RemovePodsViolatingNodeAffinity: removes pods that are violating node affinity.
* RemovePodsViolatingNodeTaints: removes pods that are violating NoSchedule taints on nodes.

Pods with a node affinity type of requiredDuringSchedulingIgnoredDuringExecution are removed.
TopologyAndDuplicates:: This profile evicts pods in an effort to evenly spread similar pods, or pods of the same topology domain, among nodes.

It enables the following strategies:
* RemovePodsViolatingTopologySpreadConstraint: finds unbalanced topology domains and tries to evict pods from larger ones when DoNotSchedule constraints are violated.
* RemoveDuplicates: ensures that there is only one pod associated with a replica set, replication controller, deployment, or job running on same node. If there are more, those duplicate pods are evicted for better pod distribution in a cluster.
LifecycleAndUtilization:: This profile evicts long-running pods and balances resource usage between nodes.

It enables the following strategies:
* RemovePodsHavingTooManyRestarts: removes pods whose containers have been restarted too many times.

Pods where the sum of restarts over all containers (including Init Containers) is more than 100.
* LowNodeUtilization: finds nodes that are underutilized and evicts pods, if possible, from overutilized nodes in the hope that recreation of evicted pods will be scheduled on these underutilized nodes.

A node is considered underutilized if its usage is below 20% for all thresholds (CPU, memory, and number of pods).

A node is considered overutilized if its usage is above 50% for any of the thresholds (CPU, memory, and number of pods).
* PodLifeTime: evicts pods that are too old.

By default, pods that are older than 24 hours are removed. You can customize the pod lifetime value.
SoftTopologyAndDuplicates:: This profile is the same as TopologyAndDuplicates, except that pods with soft topology constraints, such as whenUnsatisfiable: ScheduleAnyway, are also considered for eviction.

[NOTE]
----
Do not enable both SoftTopologyAndDuplicates and TopologyAndDuplicates. Enabling both results in a conflict.
----
EvictPodsWithLocalStorage:: This profile allows pods with local storage to be eligible for eviction.
EvictPodsWithPVC:: This profile allows pods with persistent volume claims to be eligible for eviction. If you are using Kubernetes NFS Subdir External Provisioner, you must add an excluded namespace for the namespace where the provisioner is installed.